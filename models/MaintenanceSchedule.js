const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');

const MaintenanceSchedule = sequelize.define('MaintenanceSchedule', {
    id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    equipmentId: {
        type: DataTypes.INTEGER,
        allowNull: false,
        field: 'equipment_id',
        references: {
            model: 'equipment',
            key: 'id'
        }
    },
    maintenanceType: {
        type: DataTypes.ENUM('cleaning', 'inspection', 'maintenance'),
        allowNull: false,
        field: 'maintenance_type',
        comment: 'cleaning: vệ sinh; inspection: kiểm tra; maintenance: bảo dưỡng/sửa chữa'
    },
    priority: {
        type: DataTypes.ENUM('high', 'medium', 'low'),
        allowNull: false,
        comment: 'Mức độ ưu tiên của thiết bị'
    },
    intervalDays: {
        type: DataTypes.INTEGER,
        allowNull: false,
        field: 'interval_days',
        comment: 'Khoảng cách ngày giữa các lần bảo trì'
    },
    nextDueDate: {
        type: DataTypes.DATEONLY,
        allowNull: false,
        field: 'next_due_date',
        comment: 'Ngày đến hạn bảo trì tiếp theo'
    },
    lastCompletedDate: {
        type: DataTypes.DATEONLY,
        allowNull: true,
        field: 'last_completed_date',
        comment: 'Ngày hoàn thành lần bảo trì gần nhất'
    },
    isActive: {
        type: DataTypes.BOOLEAN,
        defaultValue: true,
        field: 'is_active',
        comment: 'Lịch có đang hoạt động không'
    },
    autoGenerated: {
        type: DataTypes.BOOLEAN,
        defaultValue: true,
        field: 'auto_generated',
        comment: 'Lịch được tạo tự động hay thủ công'
    },
    notes: {
        type: DataTypes.TEXT,
        allowNull: true,
        comment: 'Ghi chú về lịch bảo trì'
    }
}, {
    tableName: 'maintenance_schedules',
    timestamps: true,
    underscored: true
});

// Static method to create maintenance schedules for new equipment
MaintenanceSchedule.createSchedulesForEquipment = async function(equipmentId, priority, startDate = null) {
    const baseDate = startDate ? new Date(startDate) : new Date();
    
    // Define maintenance intervals based on priority
    const scheduleRules = {
        high: {
            cleaning: 1,      // Daily cleaning
            inspection: 7,    // Weekly inspection
            maintenance: 30   // Monthly maintenance
        },
        medium: {
            cleaning: 3,      // Every 3 days cleaning
            inspection: 14,   // Bi-weekly inspection
            maintenance: 60   // Every 2 months maintenance
        },
        low: {
            cleaning: 7,      // Weekly cleaning
            inspection: 30,   // Monthly inspection
            maintenance: 90   // Every 3 months maintenance
        }
    };
    
    const rules = scheduleRules[priority];
    if (!rules) {
        throw new Error(`Invalid priority: ${priority}`);
    }
    
    const schedules = [];
    
    for (const [maintenanceType, intervalDays] of Object.entries(rules)) {
        const nextDueDate = new Date(baseDate);
        nextDueDate.setDate(nextDueDate.getDate() + intervalDays);
        
        const schedule = await this.create({
            equipmentId,
            maintenanceType,
            priority,
            intervalDays,
            nextDueDate: nextDueDate.toISOString().split('T')[0],
            autoGenerated: true
        });
        
        schedules.push(schedule);
    }
    
    return schedules;
};

// Static method to get overdue schedules
MaintenanceSchedule.getOverdueSchedules = async function() {
    const today = new Date().toISOString().split('T')[0];
    
    return await this.findAll({
        where: {
            nextDueDate: {
                [require('sequelize').Op.lt]: today
            },
            isActive: true
        },
        include: [{
            model: require('./Equipment'),
            as: 'equipment',
            required: true
        }],
        order: [['nextDueDate', 'ASC'], ['priority', 'DESC']]
    });
};

// Static method to get upcoming schedules (next 7 days)
MaintenanceSchedule.getUpcomingSchedules = async function(days = 7) {
    const today = new Date();
    const futureDate = new Date();
    futureDate.setDate(today.getDate() + days);
    
    return await this.findAll({
        where: {
            nextDueDate: {
                [require('sequelize').Op.between]: [
                    today.toISOString().split('T')[0],
                    futureDate.toISOString().split('T')[0]
                ]
            },
            isActive: true
        },
        include: [{
            model: require('./Equipment'),
            as: 'equipment',
            required: true
        }],
        order: [['nextDueDate', 'ASC'], ['priority', 'DESC']]
    });
};

// Instance method to generate maintenance task
MaintenanceSchedule.prototype.generateMaintenanceTask = async function(assignedTo = null) {
    const EquipmentMaintenance = require('./EquipmentMaintenance');
    
    // Create maintenance task
    const maintenanceTask = await EquipmentMaintenance.create({
        equipmentId: this.equipmentId,
        maintenanceType: this.getMaintenanceTypeMapping(),
        status: 'scheduled',
        priority: this.priority === 'high' ? 'high' : 'medium',
        scheduledDate: this.nextDueDate,
        assignedTo: assignedTo,
        title: this.generateTaskTitle(),
        description: this.generateTaskDescription(),
        isRecurring: true,
        recurringInterval: this.intervalDays
    });
    
    return maintenanceTask;
};

// Instance method to complete maintenance and reschedule
MaintenanceSchedule.prototype.completeAndReschedule = async function(completedDate = null) {
    const completed = completedDate || new Date().toISOString().split('T')[0];
    
    // Calculate next due date
    const nextDue = new Date(completed);
    nextDue.setDate(nextDue.getDate() + this.intervalDays);
    
    // Update this schedule
    await this.update({
        lastCompletedDate: completed,
        nextDueDate: nextDue.toISOString().split('T')[0]
    });
    
    return this;
};

// Helper methods
MaintenanceSchedule.prototype.getMaintenanceTypeMapping = function() {
    const mapping = {
        'cleaning': 'daily_clean',
        'inspection': 'weekly_check',
        'maintenance': 'monthly_maintenance'
    };
    return mapping[this.maintenanceType] || 'daily_clean';
};

MaintenanceSchedule.prototype.generateTaskTitle = function() {
    const typeNames = {
        'cleaning': 'Vệ sinh thiết bị',
        'inspection': 'Kiểm tra thiết bị',
        'maintenance': 'Bảo dưỡng thiết bị'
    };
    return `${typeNames[this.maintenanceType]} (Tự động)`;
};

MaintenanceSchedule.prototype.generateTaskDescription = function() {
    const descriptions = {
        'cleaning': 'Vệ sinh và làm sạch thiết bị theo quy trình tiêu chuẩn',
        'inspection': 'Kiểm tra tình trạng hoạt động và an toàn của thiết bị',
        'maintenance': 'Bảo dưỡng, kiểm tra chi tiết và thay thế linh kiện nếu cần'
    };
    
    const priorityNotes = {
        'high': 'Ưu tiên cao - Cần thực hiện ngay',
        'medium': 'Ưu tiên trung bình - Thực hiện theo lịch',
        'low': 'Ưu tiên thấp - Có thể linh hoạt thời gian'
    };
    
    return `${descriptions[this.maintenanceType]}.\n\nMức độ ưu tiên: ${priorityNotes[this.priority]}`;
};

MaintenanceSchedule.prototype.isOverdue = function() {
    const today = new Date().toISOString().split('T')[0];
    return this.nextDueDate < today && this.isActive;
};

MaintenanceSchedule.prototype.getDaysOverdue = function() {
    if (!this.isOverdue()) return 0;
    const today = new Date();
    const dueDate = new Date(this.nextDueDate);
    return Math.floor((today - dueDate) / (1000 * 60 * 60 * 24));
};

module.exports = MaintenanceSchedule;
const { MaintenanceSchedule, Equipment, EquipmentMaintenance } = require('../models');
const { ValidationError, NotFoundError } = require('../utils/errors');

const maintenanceScheduleController = {
    // Create new maintenance schedule
    async create(req, res) {
        try {
            const {
                equipmentId,
                maintenanceType,
                priority,
                intervalDays,
                nextDueDate,
                notes
            } = req.body;

            // Validate equipment exists
            const equipment = await Equipment.findByPk(equipmentId);
            if (!equipment) {
                throw new NotFoundError('Equipment not found');
            }

            const schedule = await MaintenanceSchedule.create({
                equipmentId,
                maintenanceType,
                priority,
                intervalDays,
                nextDueDate,
                notes,
                autoGenerated: false
            });

            const scheduleWithEquipment = await MaintenanceSchedule.findByPk(schedule.id, {
                include: [{
                    model: Equipment,
                    as: 'equipment',
                    attributes: ['id', 'name', 'equipmentCode', 'category']
                }]
            });

            res.status(201).json({
                success: true,
                data: scheduleWithEquipment,
                message: 'Maintenance schedule created successfully'
            });
        } catch (error) {
            console.error('Error creating maintenance schedule:', error);
            res.status(error.statusCode || 500).json({
                success: false,
                message: error.message || 'Internal server error'
            });
        }
    },

    // Get all maintenance schedules
    async getAll(req, res) {
        try {
            const {
                page = 1,
                limit = 10,
                equipmentId,
                maintenanceType,
                priority,
                isActive,
                sortBy = 'nextDueDate',
                sortOrder = 'ASC'
            } = req.query;

            const whereClause = {};
            if (equipmentId) whereClause.equipmentId = equipmentId;
            if (maintenanceType) whereClause.maintenanceType = maintenanceType;
            if (priority) whereClause.priority = priority;
            
            // Always filter by isActive, default to true if not specified
            if (isActive !== undefined) {
                whereClause.isActive = isActive === 'true';
            } else {
                whereClause.isActive = true; // Default to only active schedules
            }

            const offset = (parseInt(page) - 1) * parseInt(limit);

            const { rows: schedules, count: total } = await MaintenanceSchedule.findAndCountAll({
                where: whereClause,
                include: [{
                    model: Equipment,
                    as: 'equipment',
                    attributes: ['id', 'name', 'equipmentCode', 'category', 'status']
                }],
                order: [[sortBy, sortOrder.toUpperCase()]],
                limit: parseInt(limit),
                offset
            });

            res.json({
                success: true,
                data: {
                    schedules,
                    pagination: {
                        total,
                        page: parseInt(page),
                        limit: parseInt(limit),
                        totalPages: Math.ceil(total / parseInt(limit))
                    }
                }
            });
        } catch (error) {
            console.error('Error fetching maintenance schedules:', error);
            res.status(500).json({
                success: false,
                message: 'Internal server error'
            });
        }
    },

    // Get overdue maintenance schedules
    async getOverdue(req, res) {
        try {
            const schedules = await MaintenanceSchedule.getOverdueSchedules();
            
            res.json({
                success: true,
                data: schedules,
                count: schedules.length
            });
        } catch (error) {
            console.error('Error fetching overdue schedules:', error);
            res.status(500).json({
                success: false,
                message: 'Internal server error'
            });
        }
    },

    // Get upcoming maintenance schedules
    async getUpcoming(req, res) {
        try {
            const { days = 7 } = req.query;
            const schedules = await MaintenanceSchedule.getUpcomingSchedules(parseInt(days));
            
            res.json({
                success: true,
                data: schedules,
                count: schedules.length
            });
        } catch (error) {
            console.error('Error fetching upcoming schedules:', error);
            res.status(500).json({
                success: false,
                message: 'Internal server error'
            });
        }
    },

    // Get maintenance schedules by equipment
    async getByEquipment(req, res) {
        try {
            const { equipmentId } = req.params;
            const { isActive } = req.query;

            const whereClause = { equipmentId };
            
            // Always filter by isActive, default to true if not specified
            if (isActive !== undefined) {
                whereClause.isActive = isActive === 'true';
            } else {
                whereClause.isActive = true; // Default to only active schedules
            }

            const schedules = await MaintenanceSchedule.findAll({
                where: whereClause,
                include: [{
                    model: Equipment,
                    as: 'equipment',
                    attributes: ['id', 'name', 'equipmentCode', 'category']
                }],
                order: [['nextDueDate', 'ASC']]
            });

            res.json({
                success: true,
                data: schedules
            });
        } catch (error) {
            console.error('Error fetching equipment schedules:', error);
            res.status(500).json({
                success: false,
                message: 'Internal server error'
            });
        }
    },

    // Get maintenance schedule by ID
    async getById(req, res) {
        try {
            const { id } = req.params;

            const schedule = await MaintenanceSchedule.findByPk(id, {
                include: [{
                    model: Equipment,
                    as: 'equipment',
                    attributes: ['id', 'name', 'equipmentCode', 'category', 'status']
                }]
            });

            if (!schedule) {
                throw new NotFoundError('Maintenance schedule not found');
            }

            res.json({
                success: true,
                data: schedule
            });
        } catch (error) {
            console.error('Error fetching maintenance schedule:', error);
            res.status(error.statusCode || 500).json({
                success: false,
                message: error.message || 'Internal server error'
            });
        }
    },

    // Update maintenance schedule
    async update(req, res) {
        try {
            const { id } = req.params;
            const updateData = req.body;

            const schedule = await MaintenanceSchedule.findByPk(id);
            if (!schedule) {
                throw new NotFoundError('Maintenance schedule not found');
            }

            await schedule.update(updateData);

            const updatedSchedule = await MaintenanceSchedule.findByPk(id, {
                include: [{
                    model: Equipment,
                    as: 'equipment',
                    attributes: ['id', 'name', 'equipmentCode', 'category']
                }]
            });

            res.json({
                success: true,
                data: updatedSchedule,
                message: 'Maintenance schedule updated successfully'
            });
        } catch (error) {
            console.error('Error updating maintenance schedule:', error);
            res.status(error.statusCode || 500).json({
                success: false,
                message: error.message || 'Internal server error'
            });
        }
    },

    // Delete maintenance schedule
    async delete(req, res) {
        try {
            const { id } = req.params;

            const schedule = await MaintenanceSchedule.findByPk(id);
            if (!schedule) {
                throw new NotFoundError('Maintenance schedule not found');
            }

            await schedule.destroy();

            res.json({
                success: true,
                message: 'Maintenance schedule deleted successfully'
            });
        } catch (error) {
            console.error('Error deleting maintenance schedule:', error);
            res.status(error.statusCode || 500).json({
                success: false,
                message: error.message || 'Internal server error'
            });
        }
    },

    // Generate maintenance task from schedule
    async generateTask(req, res) {
        try {
            const { id } = req.params;
            const { assignedTo } = req.body;

            const schedule = await MaintenanceSchedule.findByPk(id);
            if (!schedule) {
                throw new NotFoundError('Maintenance schedule not found');
            }

            const task = await schedule.generateMaintenanceTask(assignedTo);

            res.status(201).json({
                success: true,
                data: task,
                message: 'Maintenance task generated successfully'
            });
        } catch (error) {
            console.error('Error generating maintenance task:', error);
            res.status(error.statusCode || 500).json({
                success: false,
                message: error.message || 'Internal server error'
            });
        }
    },

    // Complete maintenance and reschedule
    async completeAndReschedule(req, res) {
        try {
            const { id } = req.params;
            const { completedDate } = req.body;

            const schedule = await MaintenanceSchedule.findByPk(id);
            if (!schedule) {
                throw new NotFoundError('Maintenance schedule not found');
            }

            await schedule.completeAndReschedule(completedDate);

            res.json({
                success: true,
                data: schedule,
                message: 'Maintenance completed and rescheduled successfully'
            });
        } catch (error) {
            console.error('Error completing maintenance:', error);
            res.status(error.statusCode || 500).json({
                success: false,
                message: error.message || 'Internal server error'
            });
        }
    },

    // Activate schedule
    async activate(req, res) {
        try {
            const { id } = req.params;

            const schedule = await MaintenanceSchedule.findByPk(id);
            if (!schedule) {
                throw new NotFoundError('Maintenance schedule not found');
            }

            await schedule.update({ isActive: true });

            res.json({
                success: true,
                message: 'Maintenance schedule activated successfully'
            });
        } catch (error) {
            console.error('Error activating schedule:', error);
            res.status(error.statusCode || 500).json({
                success: false,
                message: error.message || 'Internal server error'
            });
        }
    },

    // Deactivate schedule
    async deactivate(req, res) {
        try {
            const { id } = req.params;

            const schedule = await MaintenanceSchedule.findByPk(id);
            if (!schedule) {
                throw new NotFoundError('Maintenance schedule not found');
            }

            await schedule.update({ isActive: false });

            res.json({
                success: true,
                message: 'Maintenance schedule deactivated successfully'
            });
        } catch (error) {
            console.error('Error deactivating schedule:', error);
            res.status(error.statusCode || 500).json({
                success: false,
                message: error.message || 'Internal server error'
            });
        }
    },

    // Regenerate schedules for equipment
    async regenerateForEquipment(req, res) {
        try {
            const { equipmentId } = req.params;
            const { startDate } = req.body;

            const equipment = await Equipment.findByPk(equipmentId);
            if (!equipment) {
                throw new NotFoundError('Equipment not found');
            }

            // Deactivate existing schedules
            await MaintenanceSchedule.update(
                { isActive: false },
                { where: { equipmentId, autoGenerated: true } }
            );

            // Create new schedules
            const schedules = await MaintenanceSchedule.createSchedulesForEquipment(
                equipmentId,
                equipment.priority,
                startDate
            );

            res.json({
                success: true,
                data: schedules,
                message: 'Maintenance schedules regenerated successfully'
            });
        } catch (error) {
            console.error('Error regenerating schedules:', error);
            res.status(error.statusCode || 500).json({
                success: false,
                message: error.message || 'Internal server error'
            });
        }
    },

    // Bulk generate tasks for overdue schedules
    async bulkGenerateTasks(req, res) {
        try {
            const { assignedTo, scheduleIds } = req.body;

            const whereClause = {};
            if (scheduleIds && scheduleIds.length > 0) {
                whereClause.id = scheduleIds;
            } else {
                // Generate for all overdue schedules
                const today = new Date().toISOString().split('T')[0];
                whereClause.nextDueDate = {
                    [require('sequelize').Op.lte]: today
                };
                whereClause.isActive = true;
            }

            const schedules = await MaintenanceSchedule.findAll({
                where: whereClause
            });

            const tasks = [];
            for (const schedule of schedules) {
                try {
                    const task = await schedule.generateMaintenanceTask(assignedTo);
                    tasks.push(task);
                } catch (error) {
                    console.error(`Error generating task for schedule ${schedule.id}:`, error);
                }
            }

            res.json({
                success: true,
                data: tasks,
                message: `${tasks.length} maintenance tasks generated successfully`
            });
        } catch (error) {
            console.error('Error bulk generating tasks:', error);
            res.status(error.statusCode || 500).json({
                success: false,
                message: error.message || 'Internal server error'
            });
        }
    }
};

module.exports = maintenanceScheduleController;
const express = require('express');
const cors = require('cors');
require('dotenv').config();

console.log('üöÄ Starting Gym Manager API...');

const app = express();

// Middleware
app.use(express.json());
app.use(cors({
    origin: ['http://localhost:3000', 'http://127.0.0.1:5500', 'http://localhost:5500'],
    credentials: true
}));

// Serve static files (frontend)
app.use(express.static('public'));

// Add routes
console.log('üîê Loading routes...');
try {
    const authRoutes = require('./routes/auth.routes');
    const memberRoutes = require('./routes/member.routes');
    
    app.use('/api/auth', authRoutes);
    app.use('/api/members', memberRoutes);
    
    console.log('‚úÖ Routes loaded successfully!');
} catch (error) {
    console.error('‚ùå Failed to load routes:', error.message);
}

// Basic routes
app.get('/', (req, res) => {
    res.json({ 
        message: 'Gym Manager API is running!',
        version: '1.0.0',
        endpoints: {
            health: '/api/health',
            auth: '/api/auth',
            members: '/api/members',
            memberships: '/api/members/memberships',
            frontend: '/index.html'
        },
        timestamp: new Date().toISOString()
    });
});

app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'OK',
        message: 'Server is healthy',
        database: 'Connected',
        timestamp: new Date().toISOString()
    });
});

// API endpoints summary
app.get('/api', (req, res) => {
    res.json({
        success: true,
        message: 'Gym Manager API',
        version: '1.0.0',
        endpoints: {
            // Auth endpoints
            'POST /api/auth/register': 'Register new user account',
            'POST /api/auth/login': 'Login user',
            'POST /api/auth/logout': 'Logout user',
            'POST /api/auth/refresh': 'Refresh access token',
            'GET /api/auth/me': 'Get current user profile',
            
            // Member endpoints
            'POST /api/members/register': 'Register new gym member',
            'GET /api/members': 'Get all members (paginated)',
            'GET /api/members/:id': 'Get member details',
            'PUT /api/members/:id': 'Update member info',
            'POST /api/members/:id/membership': 'Purchase membership for member',
            
            // Membership endpoints
            'GET /api/members/memberships/all': 'Get all membership packages',
            'GET /api/members/memberships/:id': 'Get membership details',
            'POST /api/members/memberships': 'Create new membership package (Admin)',
            'PUT /api/members/memberships/:id': 'Update membership package (Admin)',
            'DELETE /api/members/memberships/:id': 'Delete membership package (Admin)',
            'GET /api/members/memberships/:id/statistics': 'Get membership statistics (Admin)'
        }
    });
});

// Test route
app.get('/api/test', (req, res) => {
    res.json({
        success: true,
        message: 'API is working!',
        availableEndpoints: [
            'GET /api/health',
            'GET /api/test',
            'POST /api/auth/register',
            'POST /api/auth/login',
            'POST /api/members/register',
            'GET /api/members/memberships/all'
        ]
    });
});

// 404 handler
app.use('*', (req, res) => {
    res.status(404).json({ 
        success: false,
        message: 'API endpoint kh√¥ng t·ªìn t·∫°i',
        requestedUrl: req.originalUrl,
        availableEndpoints: ['/api', '/api/health', '/api/auth', '/api/members']
    });
});

// Error handler
app.use((err, req, res, next) => {
    console.error('‚ùå Error:', err.message);
    res.status(500).json({ 
        success: false,
        message: 'L·ªói server',
        error: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
});

// Start server with database
const startServer = async () => {
    try {
        console.log('üîó Connecting to database...');
        
        // Import database connection
        const { sequelize } = require('./config/database');
        
        // Test database connection
        await sequelize.authenticate();
        console.log('‚úÖ PostgreSQL connected successfully!');
        
        // Import models
        console.log('üìã Loading models...');
        const { User, RefreshToken, Member, Membership, MembershipHistory } = require('./models');
        console.log('‚úÖ Models loaded:', { 
            User: !!User, 
            RefreshToken: !!RefreshToken,
            Member: !!Member,
            Membership: !!Membership,
            MembershipHistory: !!MembershipHistory
        });
        
        // Sync database models (kh√¥ng force ƒë·ªÉ gi·ªØ d·ªØ li·ªáu c≈©)
        console.log('üîÑ Syncing database...');
        await sequelize.sync({ force: false, alter: true, logging: false });
        console.log('‚úÖ Database synchronized!');
        
        // Create default admin
        await createDefaultAdmin(User);
        
        // Seed membership packages
        await seedMembershipPackages();
        
        const PORT = process.env.PORT || 3000;
        app.listen(PORT, () => {
            console.log('');
            console.log('üéâ ========================================');
            console.log('‚úÖ Gym Manager API started successfully!');
            console.log('üéâ ========================================');
            console.log('');
            console.log(`üåê Main API: http://localhost:${PORT}`);
            console.log(`üíö Health: http://localhost:${PORT}/api/health`);
            console.log(`üîê Auth: http://localhost:${PORT}/api/auth`);
            console.log(`üë• Members: http://localhost:${PORT}/api/members`);
            console.log(`üì¶ Memberships: http://localhost:${PORT}/api/members/memberships/all`);
            console.log(`üì± Frontend: http://localhost:${PORT}/index.html`);
            console.log('');
            console.log('üìã Default Admin Account:');
            console.log('   üìß Email: admin@gym.com');
            console.log('   üîë Password: admin123');
            console.log('');
            console.log('üöÄ Ready for Member Management!');
            console.log('');
            console.log('üîß Quick Test Commands:');
            console.log(`   curl http://localhost:${PORT}/api/members/memberships/all`);
            console.log(`   curl -X POST http://localhost:${PORT}/api/members/register \\`);
            console.log(`        -H "Content-Type: application/json" \\`);
            console.log(`        -d '{"fullName":"Test User","phone":"0123456789"}'`);
            console.log('');
        });
        
    } catch (error) {
        console.error('‚ùå Failed to start server:', error.message);
        console.error('Stack trace:', error.stack);
        console.log('');
        console.log('üîß Common solutions:');
        console.log('1. Check PostgreSQL is running');
        console.log('2. Verify database credentials in .env');
        console.log('3. Ensure database exists');
        console.log('4. Check all model files are created');
        console.log('5. Check all route files are created');
        process.exit(1);
    }
};

// Create default admin user
async function createDefaultAdmin(User) {
    try {
        const bcrypt = require('bcryptjs');
        
        const adminExists = await User.findOne({ 
            where: { role: 'admin' } 
        });
        
        if (!adminExists) {
            const passwordHash = await bcrypt.hash('admin123', 12);
            
            await User.create({
                username: 'admin',
                email: 'admin@gym.com',
                passwordHash,
                fullName: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng',
                role: 'admin'
            });
            
            console.log('üë§ Default admin created successfully!');
        } else {
            console.log('üë§ Admin account already exists');
        }
    } catch (error) {
        console.error('‚ö†Ô∏è  Failed to create admin:', error.message);
    }
}

// Seed membership packages
async function seedMembershipPackages() {
    try {
        console.log('üå± Seeding membership packages...');
        
        const { Membership } = require('./models');
        
        // Check if memberships already exist
        const existingCount = await Membership.count();
        if (existingCount > 0) {
            console.log('‚úÖ Membership packages already exist');
            return;
        }

        const memberships = [
            {
                name: 'Basic Monthly',
                description: 'G√≥i c∆° b·∫£n 1 th√°ng - S·ª≠ d·ª•ng thi·∫øt b·ªã gym v√† khu v·ª±c cardio',
                duration: 30,
                price: 500000,
                benefits: ['S·ª≠ d·ª•ng thi·∫øt b·ªã gym', 'Khu v·ª±c cardio', 'Ph√≤ng thay ƒë·ªì v√† t·∫Øm', 'WiFi mi·ªÖn ph√≠'],
                maxClasses: 4,
                hasPersonalTrainer: false
            },
            {
                name: 'Premium Monthly',
                description: 'G√≥i cao c·∫•p 1 th√°ng - Bao g·ªìm c√°c l·ªõp t·∫≠p v√† h·ªó tr·ª£ PT',
                duration: 30,
                price: 800000,
                benefits: ['T·∫•t c·∫£ quy·ªÅn l·ª£i c·ªßa g√≥i Basic', 'Tham gia t·∫•t c·∫£ l·ªõp t·∫≠p', '2 bu·ªïi t∆∞ v·∫•n v·ªõi PT', 'ƒêo ch·ªâ s·ªë c∆° th·ªÉ mi·ªÖn ph√≠'],
                maxClasses: null,
                hasPersonalTrainer: true
            },
            {
                name: 'VIP Monthly',
                description: 'G√≥i VIP 1 th√°ng - D·ªãch v·ª• ho√†n h·∫£o v·ªõi PT ri√™ng',
                duration: 30,
                price: 1200000,
                benefits: ['T·∫•t c·∫£ quy·ªÅn l·ª£i c·ªßa g√≥i Premium', '8 bu·ªïi PT 1-1 ri√™ng', 'Ch·∫ø ƒë·ªô dinh d∆∞·ª°ng c√° nh√¢n', 'Massage th∆∞ gi√£n 2 l·∫ßn/th√°ng'],
                maxClasses: null,
                hasPersonalTrainer: true
            },
            {
                name: 'Basic Quarterly',
                description: 'G√≥i c∆° b·∫£n 3 th√°ng - Ti·∫øt ki·ªám 15%',
                duration: 90,
                price: 1275000,
                benefits: ['S·ª≠ d·ª•ng thi·∫øt b·ªã gym', 'Khu v·ª±c cardio', 'Ti·∫øt ki·ªám 15% so v·ªõi g√≥i th√°ng'],
                maxClasses: 12,
                hasPersonalTrainer: false
            },
            {
                name: 'Student Monthly',
                description: 'G√≥i sinh vi√™n 1 th√°ng - ∆Øu ƒë√£i ƒë·∫∑c bi·ªát',
                duration: 30,
                price: 300000,
                benefits: ['S·ª≠ d·ª•ng thi·∫øt b·ªã gym c∆° b·∫£n', 'Khu v·ª±c cardio', 'Gi·∫£m 40% cho sinh vi√™n'],
                maxClasses: 2,
                hasPersonalTrainer: false
            }
        ];

        await Membership.bulkCreate(memberships);
        console.log(`‚úÖ Created ${memberships.length} membership packages`);

    } catch (error) {
        console.error('‚ö†Ô∏è  Failed to seed memberships:', error.message);
    }
}

// Initialize server
startServer();